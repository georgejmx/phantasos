/* API file and mock backend. Bits should be pasted into ts-node and fixed */

import { Dream, Archetype } from "./types/types";

const API_URL: string = "http://localhost:3333";

export async function getArchetypes(): Promise<Archetype[]> {
  const response = await fetch(API_URL + "/archetypes");

  if (response.status >= 300)
    throw Error("Invalid or Unauthorised API request.");

  return await response.json();
}

export async function getDreams(): Promise<Dream[]> {
  const response = await fetch(API_URL + "/dreams");

  if (response.status >= 300)
    throw Error("Invalid or Unauthorised API request.");

  return await response.json();
}

export async function getRandomDream(): Promise<Dream> {
  // TODO: Will actually do a db transaction to first find count then select
  // random
  const randInt: number = Math.floor(Math.random() * 4);
  const response = await fetch(API_URL + "/dreams/" + randInt);

  if (response.status >= 300)
    throw Error("Invalid or Unauthorised API request.");

  return await response.json();
}

export async function postDream(
  dreamtext: string,
  archetypeId: number
): Promise<boolean> {
  // TODO: Will actually be autoincremented and autogenerated by db
  const newDream: Dream = {
    dreamtext,
    archetypeId,
    id: Math.floor(Math.random() * 10000),
    date: new Date().toLocaleDateString("en-UK"),
  };

  const response = await fetch(API_URL + "/dreams", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(newDream),
  });
  if (response.status < 300) return true;
  return false;
}
